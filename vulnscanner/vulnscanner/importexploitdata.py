import psycopg2
import logging
from vulnscanner.config import config as dbConfig

importExploitDataLogger = logging.getLogger(__name__)

class ImportExploitData():
    def __init__(self, cveNumber=None, referenceSource=None, descriptionValue=None, baseScore=None, serviceId=None):
        self.cveNumber = cveNumber
        self.referenceSource = referenceSource
        self.descriptionValue = descriptionValue
        self.baseScore = baseScore
        self.serviceId = serviceId
        self.dbConnection = None
        self.query = None
        self.connectToDatabase()

    def connectToDatabase(self):
        try:
            dbParams = dbConfig()
            importExploitDataLogger.info("Connecting to the PostgreSQL database")
            self.dbConnection = psycopg2.connect(**dbParams)
            self.dbCursor = self.dbConnection.cursor()
            self.importExploitData()
        except (Exception, psycopg2.DatabaseError) as error:
            importExploitDataLogger.info("Connection error: {}".format(error))
        finally:
            if self.dbConnection is not None:
                self.dbConnection.close()
                importExploitDataLogger.info("Database connection closed.")
        
    def importExploitData(self):
        self.dbCursor.execute("INSERT INTO exploit (cve_number, base_score, reference_source, description) VALUES (%s, %s, %s, %s)", (self.cveNumber, self.baseScore, self.referenceSource, self.descriptionValue))
        self.dbConnection.commit()
        self.dbCursor.execute("INSERT INTO serviceexploit (service_id, cve_number) VALUES (%s, %s)", (self.serviceId, self.cveNumber))
        self.dbConnection.commit()