import psycopg2
from psycopg2 import sql
import logging
from vulnscanner.config import config as dbConfig

importExploitDataLogger = logging.getLogger(__name__)

class ImportExploitData():
    def __init__(self, cveNumber=None, referenceSource=None, descriptionValue=None, baseScore=None, serviceId=None, params=None):
        self.cveNumber = cveNumber
        self.referenceSource = referenceSource
        self.descriptionValue = descriptionValue
        self.baseScore = str(baseScore)
        self.serviceId = str(serviceId)
        self.params = params
        self.dbConnection = None
        self.exploitId = None
        self.connectToDatabase()

    def connectToDatabase(self):
        try:
            dbParams = dbConfig(params=self.params)
            importExploitDataLogger.info("Connecting to the PostgreSQL database")
            self.dbConnection = psycopg2.connect(**dbParams)
            self.dbCursor = self.dbConnection.cursor()
            self.importExploitData()
        except (Exception, psycopg2.DatabaseError) as error:
            importExploitDataLogger.info("Connection error: {}".format(error))
        finally:
            if self.dbConnection is not None:
                self.dbConnection.close()
                importExploitDataLogger.info("Database connection closed.")
        
    def importExploitData(self):
        if self.checkIfExploitRowExists() and self.checkForEmptyTable("exploit"):
            self.dbCursor.execute("INSERT INTO exploit (cve_number, base_score, reference_source, description) VALUES (%s, %s, %s, %s)", (self.cveNumber, self.baseScore, self.referenceSource, self.descriptionValue))
            self.dbConnection.commit()
            self.getExploitId()
        if self.checkIfServiceExploitRowExists() and self.checkForEmptyTable("serviceexploit"):
            self.dbCursor.execute("INSERT INTO serviceexploit (service_id, exploit_id) VALUES (%s, %s)", (self.serviceId, self.exploitId))
            self.dbConnection.commit()

    def checkIfExploitRowExists(self):
        self.dbCursor.execute("SELECT cve_number FROM exploit WHERE cve_number=%s AND base_score=%s AND reference_source=%s AND description=%s", (self.cveNumber, self.baseScore, self.referenceSource, self.descriptionValue))
        try:
            self.dbCursor.fetchone()[0]
            return False
        except TypeError:
            return True

    def checkIfServiceExploitRowExists(self):
        self.getExploitId()
        self.dbCursor.execute("SELECT service_id FROM serviceexploit WHERE service_id=%s AND exploit_id=%s", (self.serviceId, self.exploitId))
        try:
            self.dbCursor.fetchone()[0]
            return False
        except TypeError:
            return True

    def getExploitId(self):
        self.dbCursor.execute("SELECT exploit_id FROM exploit WHERE cve_number=%s AND base_score=%s AND reference_source=%s AND description=%s", (self.cveNumber, self.baseScore, self.referenceSource, self.descriptionValue))
        self.exploitId = str(self.dbCursor.fetchone()[0])

    def checkForEmptyTable(self, table):
        try:
            self.dbCursor.execute("SELECT * FROM %s", (table))
            return False
        except TypeError:
            return True